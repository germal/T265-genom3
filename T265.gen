#pragma require "openrobots2-idl >= 2.0"

#include "or/pose/pose_estimator.gen"
#include "or/pose/rigid_body.gen"
#include "Apriltag.gen"

component T265
{
    version "0.0";
    doc "This component interfaces with Intel T265 Realsense device.";
    require   "genom3 >= 2.99.30";
    codels-requires "visp >= 3.3.1";

    /* NATIVE TYPES */
    native realsense_grabber;
    native vp_image;
    native vp_homogeneous_matrix;
    native vp_AprilTag_detector;

    typedef sequence<apriltag::tag> tags;

    /* Output ports */
    port out or_pose_estimator::state odom_state;
    port out tags port_tags;

    /* Constants */
    const double period_image_ms = 33.333;

    ids
    {
        /* Grabber container */
        realsense_grabber rs_grabber;

        /* Frame number */
        long frame_nb;

        /* Image and pose counts */
        long image_count, pose_count;

        /* Odometry data containers */
        or_pose_estimator::state pose_data;
        vp_homogeneous_matrix poseref_M_sensor;

        /* Gyro angular velocity container */
        or::t3d::avel imu_gyro_data;

        /* Accelerometer linear acceleration */
        or::t3d::acc imu_accel_data;

        /* Image container */
        vp_image I_left, I_right;
        vp_image I_left_undistorted, I_right_undistorted;

        /* AprilTag detection parameters */
        double tag_size;
        double quad_decimate;

        /* Detected AprilTags container */
        tags detected_tags;
    };

    task grabber
    {
        doc "This task will initialize grabbing mechanism used to retrieve data from T265 sensor.";

        codel<start> init_grabber(out ::ids) yield ether;
    };

    task pose_port_refresh
    {
        doc "This task is used to refresh pose output port at 200Hz.";

        period 5ms;

        codel<start> init_port(out odom_state)
            yield loop;
        codel<loop> refresh_pose(in rs_grabber, in pose_data, in poseref_M_sensor, out odom_state)
            yield pause::loop, stop;
        codel<stop> stop_pose_display()
            yield ether;
    };

    task undistort_images
    {
        doc "Task for undistorting images.";

        period 33ms;

        codel<start> init_undist_images(in I_left, in I_right, in rs_grabber, out I_left_undistorted, out I_right_undistorted)
            yield loop;
        codel<loop>  undistort_images(in I_left, in I_right, out I_left_undistorted, out I_right_undistorted)
            yield pause::loop, stop;
        codel<stop>  stop_image_undistort(out I_left_undistorted, out I_right_undistorted)
            yield ether;
    };

    task apriltag_detection
    {
        doc "AprilTag detection.";

        period 33 ms;
        delay 1 ms;

        codel<start> init_detector(in rs_grabber, out tag_size, out detected_tags, out port_tags)
            yield loop;
        codel<loop>  loop_detector(in I_left_undistorted, in tag_size, out detected_tags, out port_tags)
            yield pause::loop, stop;
        codel<stop>  kill_detector(out detected_tags, out port_tags)
            yield ether;
    };

    task image_display
    {
        doc "This task is used to display images.";

        period 33ms;

        codel<start> init_display(in I_left, in I_right, in I_left_undistorted, in I_right_undistorted, in rs_grabber)
            yield loop;
        codel<loop> refresh_display(in I_left, in I_right, in I_left_undistorted, in I_right_undistorted, in detected_tags)
            yield pause::loop, stop;
        codel<stop> stop_display(out rs_grabber, out I_left, out I_right, out I_left_undistorted, out I_right_undistorted)
            yield ether;
    };

};